03 Object-Oriented Programming
Test your knowledge

1. What are the six combinations of access modifier keywords and what do they do?
 public	Accessible everywhere (all classes and packages)
 private	Accessible only within the same class
 protected	Accessible within the same class, subclasses, and sometimes the same package
 Default (package-private)	Accessible within the same package
 protected internal	Accessible within the same assembly and by derived classes
 private protected	Accessible within the same assembly and by derived classes in the same assembly
 
2. What is the difference between the static, const, and readonly keywords when applied to a type member?
static: A static member belongs to the type itself rather than to instances of the type. It is shared across all instances of the class.
const: A constant field is a compile-time constant. Once assigned, it cannot be changed.
readonly: A readonly field can only be assigned a value at the time of declaration or within the constructor. It can be changed during object initialization, but once set, it cannot be modified outside of that.

3. What does a constructor do?
A constructor is a special method in a class that is called when an object of that class is created. It initializes the object's state (i.e., assigns values to fields) and ensures the object is ready for use.

4. Why is the partial keyword useful?
The partial keyword allows you to split the definition of a class, struct, or interface across multiple files. This can help in large projects by allowing multiple developers to work on different parts of the same type.

5. What is a tuple?
A tuple is a data structure that holds a fixed number of elements, which can be of different types. It is useful for returning multiple values from a method without creating a separate class or structure.

6. What does the C# record keyword do?
The record keyword is used to define an immutable reference type in C#. A record is primarily used for data storage and is automatically equipped with value-based equality, meaning two records with the same values are considered equal.

7. What does overloading and overriding mean?
Overloading refers to defining multiple methods with the same name but different parameters (e.g., different types or number of parameters).
Overriding refers to providing a new implementation for a method that is already defined in a base class, usually with the override keyword.

8. What is the difference between a field and a property?
A field is a variable defined in a class or struct. It directly stores data.
A property provides a way to access (get or set) a field while potentially adding additional logic (e.g., validation).

9. How do you make a method parameter optional?
You can make a method parameter optional by assigning a default value to it.

10. What is an interface and how is it different from abstract class?
An interface defines a contract of methods and properties that a class must implement. It does not contain implementation.
An abstract class can provide both abstract methods (without implementation) and concrete methods (with implementation). A class can inherit only one abstract class but can implement multiple interfaces.

11. What accessibility level are members of an interface?
All members of an interface are public by default. You do not need to specify an access modifier.

12. True/False. Polymorphism allows derived classes to provide different implementations
of the same method.
True. Polymorphism allows derived classes to provide their own implementation of methods defined in a base class.

13. True/False. The override keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
True. The override keyword is used in the derived class to override a method defined as virtual or abstract in the base class.

14. True/False. The new keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
True. The new keyword is used to hide a base class method and provide a new implementation in the derived class.

15. True/False. Abstract methods can be used in a normal (non-abstract) class.
False. Abstract methods can only be defined in abstract classes. A non-abstract class must provide an implementation for all methods. 

16.True/False. Normal (non-abstract) methods can be used in an abstract class. 
True. An abstract class can have normal methods (methods with implementations), as well as abstract methods (methods without implementations).

17. True/False. Derived classes can override methods that were virtual in the base class. 
True. Derived classes can override virtual methods using the override keyword.

18. True/False. Derived classes can override methods that were abstract in the base class. 
True. Derived classes must provide an implementation for abstract methods defined in the base class.

19. True/False. In a derived class, you can override a method that was neither virtual non abstract in the
base class.
False. You cannot override a method unless it is marked virtual or abstract in the base class.

20. True/False. A class that implements an interface does not have to provide an
implementation for all of the members of the interface.
False. A class that implements an interface must provide an implementation for all members of that interface unless the class is abstract.

21. True/False. A class that implements an interface is allowed to have other members that aren’t defined in the interface.
True. A class can have additional members that are not part of the interface it implements.

22. True/False. A class can have more than one base class.
False. C# does not support multiple inheritance, so a class can have only one base class.

23. True/False. A class can implement more than one interface.
True. A class can implement multiple interfaces in C#.

Working with methods

1. Let’s make a program that uses methods to accomplish a task. Let’s take an array and
reverse the contents of it. For example, if you have 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, it would
become 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.
To accomplish this, you’ll create three methods: one to create the array, one to reverse the
array, and one to print the array at the end.
Your Mainmethod will look something like this:
static void Main(string[] args) {
int[] numbers = GenerateNumbers();
Reverse(numbers);
PrintNumbers(numbers);
}
The GenerateNumbersmethod should return an array of 10 numbers. (For bonus points,
change the method to allow the desired length to be passed in, instead of just always
being 10.)
The PrintNumbersmethod should use a foror foreachloop to print out each item in the
array. The Reversemethod will be the hardest. Give it a try and see what you can make
happen. If you get
stuck, here’s a couple of hints:
Hint #1:To swap two values, you will need to place the value of one variable in a temporary
location to make the swap:
// Swapping a and b.
int a = 3;
int b = 5;
int temp = a;
a = b;
b = temp;
Hint #2:Getting the right indices to swap can be a challenge. Use a forloop, starting at 0
and going up to the length of the array / 2. The number you use in the forloop will be the
index of the first number to swap, and the other one will be the length of the array minus
the index minus 1. This is to account for the fact that the array is 0-based. So basically,
you’ll be swapping array[index]with array[arrayLength – index – 1].

using System;

class Program
{
    static void Main(string[] args)
    {
        int[] numbers = GenerateNumbers(10);  // Generate 10 numbers
        Reverse(numbers);
        PrintNumbers(numbers);
    }

    // Method to generate numbers
    static int[] GenerateNumbers(int length)
    {
        int[] numbers = new int[length];
        for (int i = 0; i < length; i++)
        {
            numbers[i] = i + 1;  // Fill the array with 1, 2, ..., n
        }
        return numbers;
    }

    // Method to reverse the array
    static void Reverse(int[] numbers)
    {
        int length = numbers.Length;
        for (int i = 0; i < length / 2; i++)
        {
            int temp = numbers[i];
            numbers[i] = numbers[length - i - 1];
            numbers[length - i - 1] = temp;
        }
    }

    // Method to print the array
    static void PrintNumbers(int[] numbers)
    {
        foreach (int num in numbers)
        {
            Console.Write(num + " ");
        }
    }
}

2. The Fibonacci sequence is a sequence of numbers where the first two numbers are 1 and 1,
and every other number in the sequence after it is the sum of the two numbers before it. So
the third number is 1 + 1, which is 2. The fourth number is the 2nd number plus the 3rd,
which is 1 + 2. So the fourth number is 3. The 5th number is the 3rd number plus the 4th

using System;

class Program
{
    static void Main(string[] args)
    {
        int n = 10;  // The number of Fibonacci numbers you want
        PrintFibonacci(n);
    }

    static void PrintFibonacci(int n)
    {
        int a = 0, b = 1;
        for (int i = 0; i < n; i++)
        {
            Console.Write(a + " ");
            int next = a + b;
            a = b;
            b = next;
        }
    }
}
